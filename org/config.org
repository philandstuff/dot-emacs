#  -*- coding: utf-8 -*-

* Config helpers
** ensure-installed

   This function installs a package if it isn't already installed.

#+begin_src emacs-lisp
  (defun ensure-installed (p)
    (when (not (package-installed-p p))
      (package-install p)))
#+end_src

** use-package

#+BEGIN_SRC emacs-lisp
  ;; This is only needed once, near the top of the file
  (eval-when-compile
    ;; Following line is not needed if use-package.el is in ~/.emacs.d
    (ensure-installed 'use-package)
    (require 'use-package))
#+END_SRC

** diminish

   A package to manage how modes appear in the modeline (and, in
   particular, hide boring minor modes we don't care about).  See
   [[magit]] for an example of use.

#+begin_src emacs-lisp
  (ensure-installed 'diminish)
#+end_src

* Global settings
** better-defaults
  [[https://github.com/technomancy/better-defaults][better-defaults]] does a bunch of generic emacs interface tidying,
  including:
  - better buffer unique names
  - turn off scrollbar, menu bar, toolbar

  It does all its work in autoloads, so you don't need to require it;
  being installed is enough.
#+begin_src emacs-lisp
  (ensure-installed 'better-defaults)
  (require 'better-defaults)
#+end_src

** ido

  ido-completing-read enables ido in many places.  (better-defaults already
  enables ido for some things, this just goes further).  smex adds
  ido-like behaviour to =M-x=.
#+begin_src emacs-lisp
  (ensure-installed 'ido-completing-read+)
  (ido-mode 1)
  (ido-everywhere 1)
  (ido-ubiquitous-mode 1)

  (ensure-installed 'smex)
  (require 'smex)
  (setq smex-save-file (concat user-emacs-directory ".smex-items"))
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
#+end_src

** magit

   [[https://github.com/magit/magit][magit]] is the only way to interact with git.  Seriously, even when
   I'm using other editors, I'll keep emacs open in order to use magit.
   The main reasons I like it:
   - easy manipulation of individual lines within a changeset
   - one-character commands for all common operations (push, pull,
     commit, rebase, merge..)
   As a result, I bind a global key combination to =magit-status= so
   it's always easy to get to.

#+begin_src emacs-lisp
  (ensure-installed 'magit)
  (global-set-key "\C-cg" 'magit-status)
#+end_src

** exec-path-from-shell

   This is a little package that initializes emacs's =exec-path=
   variable from whatever your shell's =$PATH= is.

#+begin_src emacs-lisp
  (ensure-installed 'exec-path-from-shell)
  (exec-path-from-shell-initialize)
#+end_src

** y-or-n-p

   This replaces dialogs which require a full "yes" or "no" to just
   require a simple "y" or "n".

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** indicate empty lines

    This adds a graphic in the margin to show how many empty lines you
    have beyond the end of your file's content.

#+begin_src emacs-lisp
  (set-default 'indicate-empty-lines t)
#+end_src

** remap windows key ("super") to meta

   On non-OS/X operating systems, I want the windows key on the
   keyboard to be another meta key.

#+begin_src emacs-lisp
  (when (string-equal system-type "gnu/linux")
    (setq x-super-keysym 'meta))
#+end_src

** enable commands

   Emacs has a few commands which are disabled by default, because
   they can be confusing.  Enable them here:

#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src

** visible bell

#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil)
  (setq ring-bell-function
        (lambda ()
          (invert-face 'mode-line)
          (run-with-timer 0.1 nil 'invert-face 'mode-line)))
#+END_SRC

** flycheck

#+begin_src emacs-lisp
  (ensure-installed 'flycheck)
  (require 'flycheck)
  (add-hook 'after-init-hook #'global-flycheck-mode)
  (diminish 'flycheck-mode)
#+end_src

* lsp-mode

The LSP mode is useful for multiple languages.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :hook (go-mode . lsp-deferred))

  ;; provides fancier overlays
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
#+END_SRC

* company-mode

Company mode is a standard completion package that works well with lsp-mode.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    ;; Optionally enable completion-as-you-type behavior.
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1))
#+END_SRC


* Haskell

#+begin_src emacs-lisp
  (ensure-installed 'haskell-mode)
  (eval-after-load 'haskell-mode
    '(progn
       (add-hook 'haskell-mode-hook #'haskell-indentation-mode)
       (add-hook 'haskell-mode-hook #'interactive-haskell-mode)))
  (setq haskell-process-wrapper-function
        (lambda (args) (apply 'nix-shell-command (nix-current-sandbox) args)))

#+end_src

* Pretty-mode

This adds pretty arrows, lambdas, etc to Haskell and friends

#+BEGIN_SRC emacs-lisp
  (ensure-installed 'pretty-mode)

  (global-pretty-mode 1)
#+END_SRC


* Javascript
** eslint

I cribbed a lot of this from [[http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html][a nice blog post]].

#+BEGIN_SRC emacs-lisp
  (setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers
            '(javascript-jshint)))

  ;; use local eslint from node_modules before global
  ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))

  (defun my/allow-eslint-in-web-mode ()
    (flycheck-add-mode 'javascript-eslint 'web-mode))


  (defun my/flycheck-mode-hook ()
    (progn
      (my/use-eslint-from-node-modules)
      (my/allow-eslint-in-web-mode)))

  (add-hook 'flycheck-mode-hook #'my/flycheck-mode-hook)
#+END_SRC
** elm
#+BEGIN_SRC emacs-lisp
  (ensure-installed 'flycheck-elm)
  (eval-after-load 'flycheck
    '(flycheck-elm-setup))
#+END_SRC

* Lisp
** Clojure

   [[https://github.com/clojure-emacs/cider][cider]] is a package for live-coding Clojure by interacting with a
   Clojure nREPL instance.  [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]] is the major mode for editing
   clojure code.

#+begin_src emacs-lisp
  (ensure-installed 'cider)
  (ensure-installed 'clojure-mode)
#+end_src


** Paredit

   Paredit is a minor mode for enforcing balanced parentheses and
   providing operations on sets of parentheses -- generally "slurp"
   and "barf" to swallow or remove terms at the right-hand side of a
   paren pair.  Naturally, this is a good fit for lisps.

#+begin_src emacs-lisp
  (ensure-installed 'paredit)
  (eval-after-load 'clojure-mode
    '(add-hook 'clojure-mode-hook #'enable-paredit-mode))
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (eval-after-load 'scheme
    '(add-hook 'scheme-mode-hook #'enable-paredit-mode))
#+end_src

* nix

Stuff for [[http://nixos.org/][nixos and nix]].

#+begin_src emacs-lisp
  (ensure-installed 'nix-mode)
  (ensure-installed 'nix-sandbox)
#+end_src

* puppet

  [[https://docs.puppetlabs.com/puppet/][Puppet]] is a configuration management language.  First, we want the
  major mode for editing puppet code:

#+begin_src emacs-lisp
  (ensure-installed 'puppet-mode)
#+end_src

* golang

#+BEGIN_SRC emacs-lisp
  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+END_SRC


* Markdown

#+begin_src emacs-lisp
  (ensure-installed 'markdown-mode)
#+end_src

* org mode

** capture

   Org mode supports a feature called "[[http://orgmode.org/manual/Capture.html][capture]]", which allows you to
   quickly capture TODO items while working on something else.  This
   needs a global key combination (=C-c c=) to capture notes.

   We also need to tell org which file captured notes should be added
   to.

#+begin_src emacs-lisp
  (global-set-key "\C-cc" 'org-capture)
  (setq org-directory (concat (getenv "HOME") "/ownCloud/org"))
  (setq org-default-notes-file (concat org-directory "/todo.org"))
#+end_src

** other global keys

#+begin_src emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
#+end_src

** export options

   I use org-reveal to generate presentations with org-mode.  Normally
   org-mode will helpfully generate a table of contents on html
   export, but this isn't great for a reveal presentation, so let's
   disable it:

#+begin_src emacs-lisp
  (setq org-export-with-toc nil)
#+end_src

** org-babel

   [[http://orgmode.org/worg/org-contrib/babel/][Babel]] is org-mode's ability to execute source code within
   documents.  (It's how this config file gets run.)

   To avoid running arbitrary code, each specific language that you
   want to allow org-mode to run code for on export needs to be
   enabled here:

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((clojure . t)
     (ditaa . t)
     (python . t)
     (ruby . t)
     ))
#+end_src

   (ditaa is a language for drawing diagrams in ascii art and
   generating graphical output.  org-mode has builtin support for
   ditaa.)

   We want to fontify code in code blocks:

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

** emphasis

I often use =~tildes for typewriter font~=.  However org-mode's
default configuration breaks on a number of code examples.  I'd like
to highlight ~"strings"~, ~'quoted-symbols~, and ~'(quoted lists)~.
This is the standard value, without ='= and ="= in the disallowed
BORDER character regexp.

#+begin_src elisp
  (setq org-emphasis-regexp-components '("        ('\"{" "-       .,:!?;'\")}\\" "        
  ," "." 1))
#+end_src

* html

[[https://github.com/magnars/tagedit][Tagedit]] is a minor mode which adds paredit-like features to sgml-mode
(ie when editing html documents).

#+begin_src emacs-lisp
  (ensure-installed 'tagedit)
  (eval-after-load "sgml-mode"
    '(progn
       (require 'tagedit)
       (tagedit-add-paredit-like-keybindings)
       (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))

#+end_src

* twitter

  Emacs's twittering-mode provides a twitter client.  This sets up the
  default timelines that will be opened when I launch twittering-mode:

#+begin_src emacs-lisp
  (setq twittering-initial-timeline-spec-string
        '(":home" ":replies"))
#+end_src

* rcirc

  rcirc is an irc client from within emacs.  Most of my settings are
  in my [[secrets]] file, as they contain passwords.

** rcirc-track

   The rcirc-track-minor-mode is a global minor mode which adds an
   indicator to the modeline indicating which irc buffers have had
   activity, and also which buffers have mentioned you by nick:

#+begin_src emacs-lisp
  (rcirc-track-minor-mode 1)
#+end_src

** omit

   Don't show JOIN and PART messages by default, except for people
   with recent activity.  (This is the behaviour you get with =C-c
   C-o= but I want it on by default.)  Also, don't show
   rcirc-omit-mode in the modeline.

#+begin_src emacs-lisp
  (add-hook 'rcirc-mode-hook #'rcirc-omit-mode)
  (diminish 'rcirc-omit-mode)
#+end_src

* projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a minor mode which allows you to quickly navigate to
files within the same project.

#+begin_src emacs-lisp
  (ensure-installed 'projectile)
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (diminish 'projectile-mode)
#+end_src

* terraform

#+begin_src emacs-lisp
  (ensure-installed 'terraform-mode)
  (eval-after-load 'terraform-mode
    '(add-hook 'terraform-mode-hook #'terraform-format-on-save-mode))
#+end_src

* local settings
  This repo has a /local directory, with all of its contents in
  =.gitignore=, containing various local settings.

** customized variables
   custom.el provides a mechanism for customizing emacs variables from
   within emacs.  To make such changes permanent, it will put changes
   into =custom-file= which by default is =init.el=.  To avoid
   polluting that file, we set it to something else:

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (concat user-emacs-directory "custom.el"))
     (load custom-file 'noerror)
   #+END_SRC

** secrets

   It is good to store your passwords and things in an encrypted
   file.

   This does mean that every time you use it you have to give the
   passphrase, but it does mean that you can keep all your passwords
   for things like rcirc and stuff in a file reasonably safely (though
   it will be in memory when emacs is running, so it isn't completely
   secure).

   #+BEGIN_SRC emacs-lisp
     (load (concat user-emacs-directory "local/secrets.el.gpg") 'noerror)
   #+END_SRC
* Possible future work
** TODO investigate cask for gemfile-like packaging
   - alternative: just check dependencies in
